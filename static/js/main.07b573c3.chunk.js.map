{"version":3,"sources":["components/Grid.js","components/GridRow.js","components/GridCell.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","props","addR","setState","num_Rows","state","console","log","addC","num_Cols","removeR","removeC","selectedColor","event","color","target","value","className","onClick","this","fillU","fill","clearAll","onChange","id","createGrid","rows","x","columns","y","push","toString","cells","Component","GridRow","key","GridCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07b573c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { GridRow, GridCell } from '.';\r\n\r\nexport default class Grid extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            num_Cols: 1,\r\n            num_Rows: 1,\r\n            color: \"white\"\r\n        }\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <section>\r\n                <div className=\"interface\">\r\n                    <button onClick={this.addR}><p>Add Row</p></button>\r\n                    <button onClick={this.addC}><p>Add Col</p></button>\r\n                    <button onClick={this.removeR}><p>Remove Row</p></button>\r\n                    <button onClick={this.removeC}><p>Remove Col</p></button>\r\n                    <button onClick={this.fillU}><p>Fill All Uncolored</p></button>\r\n                    <button onClick={this.fill}><p>Fill All</p></button>\r\n                    <button onClick={this.clearAll}><p>Clear</p></button>\r\n\t\r\n\r\n                    <select onChange={this.selectedColor}>\r\n                        <option value=\"#ffffff\">White</option>\r\n                        <option value=\"#000000\">Black</option>\r\n                        <option value=\"#ffff00\">Yellow</option>\r\n                        <option value=\"#9acd32\">Yellow-Green</option>\r\n                        <option value=\"#00ff00\">Green</option>\r\n                        <option value=\"#0d98ba\">Blue-Green</option>\r\n                        <option value=\"#0000ff\">Blue</option>\r\n                        <option value=\"#8a2be2\">Blue-Violet</option>\r\n                        <option value=\"#7f00ff\">Violet</option>\r\n                        <option value=\"#c71585\">Red-Violet</option>\r\n                        <option value=\"#ff0000\">Red</option>\r\n                        <option value=\"#ff5349\">Red-Orange</option>\r\n                        <option value=\"#ffa500\">Orange</option>\r\n                        <option value=\"#f8d568\">Yellow-Orange</option>\r\n                    </select>\r\n\r\n                    <hr></hr>\r\n\r\n                </div>\r\n\r\n                <table id=\"grid\">\r\n                    <tbody>\r\n                        {this.createGrid(this.state.num_Rows, this.state.num_Cols)}\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    createGrid(num_Rows, num_Cols) \r\n    {\r\n        let rows = [];\r\n\r\n        for (let x = 0; x < num_Rows; x++)\r\n        {\r\n            let columns = [];\r\n\r\n            for (let y = 0; y < num_Cols; y++)\r\n            {\r\n                columns.push(<GridCell key={x+y.toString()} color={this.state.color} />);\r\n            }\r\n            rows.push(<GridRow key={x.toString()} cells={columns} color={this.state.color} />);\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    addR = () =>\r\n    {\r\n        this.setState({ num_Rows: this.state.num_Rows + 1 });\r\n        console.log(\"Pressed addR\");\r\n        console.log(this.state.num_Rows);\r\n    }\r\n\r\n    addC = () =>\r\n    {\r\n        this.setState({ num_Cols: this.state.num_Cols + 1 });\r\n        console.log(\"Pressed addC\");\r\n        console.log(this.state.num_Cols );\r\n    }\r\n\r\n    removeR = () =>\r\n    {\r\n        if (this.state.num_Rows <= 1)\r\n        {\r\n            this.setState({ num_Rows: this.state.num_Rows});\r\n            console.log(\"Cannot removeR\");\r\n        }\r\n        else\r\n        {\r\n            this.setState({ num_Rows: this.state.num_Rows - 1 });\r\n            console.log(\"Pressed removeR\");\r\n        }\r\n    }\r\n\r\n    removeC = () =>\r\n    {\r\n        if (this.state.num_Cols <= 1)\r\n        {\r\n            this.setState({ num_Cols: this.state.num_Cols});\r\n            console.log(\"Cannot removeC\");\r\n        }\r\n        else \r\n        {\r\n            this.setState({ num_Cols: this.state.num_Cols - 1 });\r\n            console.log(\"Pressed removeC\");\r\n        }\r\n    }\r\n\r\n    selectedColor = (event) =>\r\n    {\r\n        this.setState({ color: event.target.value });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class GridRow extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            cells: props.cells,\r\n            color: props.color\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <tr className=\"grid_row\">\r\n                {this.props.cells}\r\n            </tr>\r\n        );\r\n    }   \r\n}\r\n\r\nGridRow.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    cells: PropTypes.array.isRequired,\r\n    color: PropTypes.string.isRequired\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class GridCell extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            color: \"white\"\r\n        }\r\n    }\r\n      \r\n    render()\r\n    {\r\n        return (\r\n            <td className=\"grid_cell\"/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nGridCell.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    color: PropTypes.string\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Grid } from './components';\r\n\r\n\r\nexport default class App extends Component \r\n{\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"React_Grid\">\r\n        <Grid />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n*/\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}