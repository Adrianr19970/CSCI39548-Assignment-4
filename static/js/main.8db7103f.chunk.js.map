{"version":3,"sources":["components/Grid.js","components/GridRow.js","components/GridCell.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","props","addR","setState","num_Rows","state","console","log","addC","num_Cols","removeR","removeC","selectedColor","event","color","target","value","fillU","fill","clearAll","className","onClick","this","onChange","id","createGrid","rows","x","columns","y","push","changeColor","toString","cells","Component","GridRow","key","GridCell","style","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8db7103f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { GridRow, GridCell } from '.';\r\n\r\nexport default class Grid extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            num_Cols: 1,\r\n            num_Rows: 1,\r\n            color: \"white\",\r\n            fillU: false,\r\n            fill: false,\r\n            clearAll: false,\r\n        }\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <section>\r\n                <div className=\"interface\">\r\n                    <button onClick={this.addR}><p>Add Row</p></button>\r\n                    <button onClick={this.addC}><p>Add Col</p></button>\r\n                    <button onClick={this.removeR}><p>Remove Row</p></button>\r\n                    <button onClick={this.removeC}><p>Remove Col</p></button>\r\n                    <button onClick={this.fillU}><p>Fill All Uncolored</p></button>\r\n                    <button onClick={this.fill}><p>Fill All</p></button>\r\n                    <button onClick={this.clearAll}><p>Clear</p></button>\r\n\t\r\n\r\n                    <select onChange={this.selectedColor}>\r\n                        <option value=\"#ffffff\">White</option>\r\n                        <option value=\"#000000\">Black</option>\r\n                        <option value=\"#ffff00\">Yellow</option>\r\n                        <option value=\"#9acd32\">Yellow-Green</option>\r\n                        <option value=\"#00ff00\">Green</option>\r\n                        <option value=\"#0d98ba\">Blue-Green</option>\r\n                        <option value=\"#0000ff\">Blue</option>\r\n                        <option value=\"#8a2be2\">Blue-Violet</option>\r\n                        <option value=\"#7f00ff\">Violet</option>\r\n                        <option value=\"#c71585\">Red-Violet</option>\r\n                        <option value=\"#ff0000\">Red</option>\r\n                        <option value=\"#ff5349\">Red-Orange</option>\r\n                        <option value=\"#ffa500\">Orange</option>\r\n                        <option value=\"#f8d568\">Yellow-Orange</option>\r\n                    </select>\r\n\r\n                    <hr></hr>\r\n\r\n                </div>\r\n\r\n                <table id=\"grid\">\r\n                    <tbody>\r\n                        {this.createGrid(this.state.num_Rows, this.state.num_Cols)}\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    createGrid(num_Rows, num_Cols) \r\n    {\r\n        let rows = [];\r\n\r\n        for (let x = 0; x < num_Rows; x++)\r\n        {\r\n            let columns = [];\r\n\r\n            for (let y = 0; y < num_Cols; y++)\r\n            {\r\n                columns.push(<GridCell key={x+y.toString()} color={this.state.color} changeColor={this.changeColor} fillU={this.state.fillU} fill={this.state.fill} clearAll={this.state.clearAll}/>);\r\n            }\r\n            rows.push(<GridRow key={x.toString()} cells={columns} color={this.state.color} />);\r\n        }\r\n        //After grid is created, set all the options (fill uncolored, fill all, and clear) to false.\r\n        this.state.fillU=false;\r\n        this.state.fill = false;\r\n        this.state.clearAll = false;\r\n        return rows;\r\n    }\r\n\r\n    addR = () =>\r\n    {\r\n        this.setState({ num_Rows: this.state.num_Rows + 1 });\r\n        console.log(\"Pressed addR\");\r\n        console.log(this.state.num_Rows);\r\n    }\r\n\r\n    addC = () =>\r\n    {\r\n        this.setState({ num_Cols: this.state.num_Cols + 1 });\r\n        console.log(\"Pressed addC\");\r\n        console.log(this.state.num_Cols );\r\n    }\r\n\r\n    removeR = () =>\r\n    {\r\n        if (this.state.num_Rows <= 1)\r\n        {\r\n            this.setState({ num_Rows: this.state.num_Rows});\r\n            console.log(\"Cannot removeR\");\r\n        }\r\n        else\r\n        {\r\n            this.setState({ num_Rows: this.state.num_Rows - 1 });\r\n            console.log(\"Pressed removeR\");\r\n        }\r\n    }\r\n\r\n    removeC = () =>\r\n    {\r\n        if (this.state.num_Cols <= 1)\r\n        {\r\n            this.setState({ num_Cols: this.state.num_Cols});\r\n            console.log(\"Cannot removeC\");\r\n        }\r\n        else \r\n        {\r\n            this.setState({ num_Cols: this.state.num_Cols - 1 });\r\n            console.log(\"Pressed removeC\");\r\n        }\r\n    }\r\n\t\r\n    selectedColor = (event) =>\r\n    {\r\n        this.setState({ color: event.target.value });\r\n    }\r\n\t\r\n\t\r\n\t\r\n\tfillU = () =>\r\n\t{\r\n\t\tthis.setState({fillU:true});\r\n    }\r\n    \r\n    /*\r\n    The way this method works is similar to ^^, once user clicks fillAll, it \r\n    triggers this method which will set the state of fill to be true, allowing \r\n    the handling of each gridCell to happen in that file. In createGrid, after the \r\n    grid is created, the states are set to false. \r\n    */\r\n    fill = () =>\r\n    {\r\n        this.setState({fill:true});\r\n    }\r\n\r\n    /*\r\n    The way this method works is similar to ^^^, once user clicks clear, it \r\n    triggers this method which will set the state of clearAll to be true, allowing \r\n    the handling of each gridCell to happen in that file. In createGrid, after the \r\n    grid is created, the states are set to false. \r\n    */\r\n   clearAll = () => //using DOM elements/methods\r\n   {\r\n       this.setState({clearAll:true});\r\n   }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class GridRow extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            cells: props.cells,\r\n            color: props.color\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <tr className=\"grid_row\">\r\n                {this.props.cells}\r\n            </tr>\r\n        );\r\n    }   \r\n}\r\n\r\nGridRow.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    cells: PropTypes.array.isRequired,\r\n    color: PropTypes.string.isRequired\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class GridCell extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            color: \"white\"\r\n        }\r\n    }\r\n      \r\n    render()\r\n    {\r\n\t\tif(this.props.fillU && this.state.color===\"white\"){\r\n\t\t\tthis.state.color=this.props.color;\r\n\t\t\treturn (\r\n\t\t\t\t<td className=\"grid_cell\" onClick={this.changeColor} style={{backgroundColor:this.props.color}}/>\r\n\t\t\t);\r\n        }\r\n        else if(this.props.fill ){\r\n\t\t\tthis.state.color=this.props.color; //change the state to the color the user selected\r\n\t\t\treturn (\r\n\t\t\t\t<td className=\"grid_cell\" onClick={this.changeColor} style={{backgroundColor:this.props.color}}/>\r\n\t\t\t);\r\n        }\r\n        else if(this.props.clearAll){\r\n\t\t\tthis.state.color=\"white\"; //the state is back to its original color (white)\r\n\t\t\treturn (\r\n\t\t\t\t<td className=\"grid_cell\" onClick={this.changeColor} style={{backgroundColor:\"white\"}}/> //changed cell color to white\r\n\t\t\t);\r\n        }\r\n        return (\r\n            <td className=\"grid_cell\" onClick={this.changeColor} style={{backgroundColor:this.state.color}}/>\r\n        );\r\n    }\r\n\t\r\n\tchangeColor = () =>\r\n\t{\r\n\t\tthis.setState({color:this.props.color});\r\n\t}\r\n\r\n}\r\n\r\nGridCell.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    color: PropTypes.string\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Grid } from './components';\r\n\r\n\r\nexport default class App extends Component \r\n{\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"React_Grid\">\r\n        <Grid />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n*/\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}